import telebot
import sqlite3
import requests
import time
import os
import threading

print("=== –ë–û–¢ –ó–ê–ü–£–©–ï–ù –ù–ê RAILWAY ===")

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TELEGRAM_BOT_TOKEN = '7791402185:AAHqmitReQZjuHl7ZHV2VzPXTyFT9BUXVyU'

if not TELEGRAM_BOT_TOKEN:
    print("‚ùå –û–®–ò–ë–ö–ê: TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    exit()

print(f"‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω! –î–ª–∏–Ω–∞: {len(TELEGRAM_BOT_TOKEN)} —Å–∏–º–≤–æ–ª–æ–≤")

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
try:
    bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)
    print("‚úÖ –ë–æ—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: {e}")
    exit()

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('alerts.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS alerts (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        symbol TEXT NOT NULL,
        target_price REAL NOT NULL,
        current_price REAL NOT NULL,
        alert_type TEXT NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    conn.commit()
    conn.close()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞")

def add_alert(user_id, symbol, target_price, current_price, alert_type):
    conn = sqlite3.connect('alerts.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('INSERT INTO alerts (user_id, symbol, target_price, current_price, alert_type) VALUES (?, ?, ?, ?, ?)',
                   (user_id, symbol.upper(), target_price, current_price, alert_type))
    conn.commit()
    conn.close()
    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∞–ª–µ—Ä—Ç: {symbol} {alert_type} ${target_price} (—Å–µ–π—á–∞—Å: ${current_price})")

def get_all_alerts():
    conn = sqlite3.connect('alerts.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('SELECT id, user_id, symbol, target_price, current_price, alert_type FROM alerts')
    all_alerts = cursor.fetchall()
    conn.close()
    return all_alerts

def delete_alert(alert_id):
    conn = sqlite3.connect('alerts.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('DELETE FROM alerts WHERE id = ?', (alert_id,))
    conn.commit()
    conn.close()
    print(f"‚úÖ –£–¥–∞–ª–µ–Ω –∞–ª–µ—Ä—Ç ID: {alert_id}")

def get_user_alerts(user_id):
    conn = sqlite3.connect('alerts.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('SELECT id, symbol, target_price, alert_type FROM alerts WHERE user_id = ?', (user_id,))
    alerts = cursor.fetchall()
    conn.close()
    return alerts

def get_current_price(symbol):
    try:
        # –£–±–∏—Ä–∞–µ–º USDT –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –≤ —Å–∏–º–≤–æ–ª–µ
        if symbol.endswith('USDT'):
            full_symbol = symbol
        else:
            full_symbol = f"{symbol.upper()}USDT"
        
        url = f"https://api.bybit.com/v5/market/tickers?category=spot&symbol={full_symbol}"
        print(f"üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞—é —Ü–µ–Ω—É –¥–ª—è: {full_symbol}")
        response = requests.get(url, timeout=10)
        data = response.json()
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"üìä –û—Ç–≤–µ—Ç API: {data}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
        if data.get('retCode') != 0:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {data.get('retMsg')}")
            return None, symbol
            
        if 'result' not in data or 'list' not in data['result']:
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ API")
            return None, symbol
            
        tickers = data['result']['list']
        if not tickers:
            print(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–º–≤–æ–ª–∞ {full_symbol}")
            return None, symbol
            
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ç–∏–∫–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞
        ticker = tickers[0]
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–ª—è —Å —Ü–µ–Ω–æ–π
        if 'lastPrice' in ticker and ticker['lastPrice']:
            current_price = float(ticker['lastPrice'])
        elif 'markPrice' in ticker and ticker['markPrice']:
            current_price = float(ticker['markPrice'])
        elif 'indexPrice' in ticker and ticker['indexPrice']:
            current_price = float(ticker['indexPrice'])
        else:
            print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ —Å —Ü–µ–Ω–æ–π –≤ –æ—Ç–≤–µ—Ç–µ")
            return None, symbol
        
        print(f"‚úÖ –¶–µ–Ω–∞ –ø–æ–ª—É—á–µ–Ω–∞: {full_symbol} = ${current_price}")
        return current_price, full_symbol
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è {symbol}: {e}")
        return None, symbol

def determine_alert_type(current_price, target_price):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞–ª–µ—Ä—Ç–∞: UP (—Ä–æ—Å—Ç) –∏–ª–∏ DOWN (–ø–∞–¥–µ–Ω–∏–µ)"""
    if target_price > current_price:
        return "UP"  # –ñ–¥–µ–º —Ä–æ—Å—Ç–∞ —Ü–µ–Ω—ã
    else:
        return "DOWN"  # –ñ–¥–µ–º –ø–∞–¥–µ–Ω–∏—è —Ü–µ–Ω—ã

def should_trigger_alert(current_price, target_price, alert_type):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ–º, –¥–æ–ª–∂–µ–Ω –ª–∏ —Å—Ä–∞–±–æ—Ç–∞—Ç—å –∞–ª–µ—Ä—Ç"""
    if alert_type == "UP":
        return current_price >= target_price  # –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –í–´–†–û–°–õ–ê –¥–æ —Ü–µ–ª–∏
    else:  # DOWN
        return current_price <= target_price  # –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –£–ü–ê–õ–ê –¥–æ —Ü–µ–ª–∏

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
@bot.message_handler(commands=['start'])
def send_welcome(message):
    print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    bot.reply_to(message, "üí∞ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω –∫—Ä–∏–ø—Ç—ã.\n\n–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏: BTC 50000\n\n–Ø —Å–∞–º –ø–æ–π–º—É, –∂–¥–∞—Ç—å —Ä–æ—Å—Ç–∞ –∏–ª–∏ –ø–∞–¥–µ–Ω–∏—è —Ü–µ–Ω—ã! üìàüìâ")

@bot.message_handler(commands=['status'])
def status(message):
    alerts_count = len(get_all_alerts())
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É BTC –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    btc_price, _ = get_current_price("BTC")
    price_info = f"\nüí∞ BTC —Å–µ–π—á–∞—Å: ${btc_price:,.2f}" if btc_price else ""
    
    bot.reply_to(message, f"‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!\n–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {alerts_count}{price_info}\n\n–ò—Å–ø–æ–ª—å–∑—É–π:\n/testprice - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–Ω—É\n/checknow - –º–æ–∏ –∞–ª–µ—Ä—Ç—ã\n/myalerts - —Å–ø–∏—Å–æ–∫ –∞–ª–µ—Ä—Ç–æ–≤")

@bot.message_handler(commands=['testprice'])
def test_price(message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã"""
    try:
        symbol = "BTC"
        current_price, full_symbol = get_current_price(symbol)
        
        if current_price:
            response = f"üß™ –¢–ï–ö–£–©–ê–Ø –¶–ï–ù–ê:\n\n{full_symbol}\nüí∞ ${current_price:,.2f}"
            bot.reply_to(message, response)
        else:
            bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É BTC")
            
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")

@bot.message_handler(commands=['myalerts'])
def list_alerts(message):
    user_id = message.from_user.id
    alerts = get_user_alerts(user_id)
    
    if not alerts:
        bot.send_message(message.chat.id, "–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.")
    else:
        response = "üìã –¢–≤–æ–∏ –∑–∞–ø—Ä–æ—Å—ã:\n\n"
        for alert in alerts:
            id, symbol, target_price, alert_type = alert
            icon = "üìà" if alert_type == "UP" else "üìâ"
            response += f"‚Ä¢ {icon} {symbol} -> ${target_price:,.2f} ({alert_type})\n"
        bot.send_message(message.chat.id, response)

@bot.message_handler(commands=['testalert'])
def test_alert(message):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∞–ª–µ—Ä—Ç–æ–≤"""
    user_id = message.from_user.id
    try:
        symbol = "BTC"
        current_price, full_symbol = get_current_price(symbol)
        
        if current_price:
            # –°–æ–∑–¥–∞–µ–º –¥–≤–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–ª–µ—Ä—Ç–∞: –æ–¥–∏–Ω –Ω–∞ —Ä–æ—Å—Ç, –æ–¥–∏–Ω –Ω–∞ –ø–∞–¥–µ–Ω–∏–µ
            test_target_up = current_price + 100  # –ù–∞ $100 –≤—ã—à–µ
            test_target_down = current_price - 100  # –ù–∞ $100 –Ω–∏–∂–µ
            
            add_alert(user_id, full_symbol, test_target_up, current_price, "UP")
            add_alert(user_id, full_symbol, test_target_down, current_price, "DOWN")
            
            response = f"""üß™ –¢–ï–°–¢–û–í–´–ï –ê–õ–ï–†–¢–´!

{full_symbol}
–°–µ–π—á–∞—Å: ${current_price:,.2f}

üìà –ê–ª–µ—Ä—Ç –Ω–∞ –†–û–°–¢: ${test_target_up:,.2f}
üìâ –ê–ª–µ—Ä—Ç –Ω–∞ –ü–ê–î–ï–ù–ò–ï: ${test_target_down:,.2f}

–°–ª–µ–∂—É –∑–∞ —Ü–µ–Ω–æ–π!"""
            bot.reply_to(message, response)
        else:
            bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É BTC")
            
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")

@bot.message_handler(commands=['checknow'])
def check_now(message):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∞–ª–µ—Ä—Ç–æ–≤"""
    user_id = message.from_user.id
    try:
        all_alerts = get_all_alerts()
        user_alerts = [alert for alert in all_alerts if alert[1] == user_id]
        
        if not user_alerts:
            bot.reply_to(message, "–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤")
            return
            
        response = "üîç –¢–≤–æ–∏ –∞–ª–µ—Ä—Ç—ã:\n\n"
        for alert in user_alerts:
            alert_id, user_id, symbol, target_price, initial_price, alert_type = alert
            current_price_now, _ = get_current_price(symbol)
            
            if current_price_now:
                icon = "üìà" if alert_type == "UP" else "üìâ"
                status = "‚úÖ –ì–û–¢–û–í!" if should_trigger_alert(current_price_now, target_price, alert_type) else "‚è≥ –∂–¥—É"
                diff = current_price_now - target_price
                diff_text = f"+${diff:,.2f}" if diff > 0 else f"-${abs(diff):,.2f}"
                
                response += f"‚Ä¢ {icon} {symbol}: ${current_price_now:,.2f} / ${target_price:,.2f} ({diff_text}) - {status}\n"
            else:
                response += f"‚Ä¢ {symbol}: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã\n"
        
        bot.reply_to(message, response)
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")

@bot.message_handler(commands=['clear'])
def clear_alerts(message):
    user_id = message.from_user.id
    conn = sqlite3.connect('alerts.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('DELETE FROM alerts WHERE user_id = ?', (user_id,))
    count = cursor.rowcount
    conn.commit()
    conn.close()
    bot.reply_to(message, f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {count} –∞–ª–µ—Ä—Ç–æ–≤!")

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞
@bot.message_handler(func=lambda message: True)
def set_alert(message):
    try:
        user_id = message.from_user.id
        text = message.text.split()
        
        if len(text) < 2:
            bot.reply_to(message, "‚ùå –ù–∞–ø–∏—à–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –¢–ò–ö–ï–† –¶–ï–ù–ê\n–ù–∞–ø—Ä–∏–º–µ—Ä: BTC 50000")
            return

        symbol = text[0].upper()
        target_price = float(text[1])

        print(f"üîÑ –ó–∞–ø—Ä–æ—Å –æ—Ç {user_id}: {symbol} ${target_price}")

        current_price, full_symbol = get_current_price(symbol)
        
        if current_price is None:
            bot.reply_to(message, f"‚ùå –¢–∏–∫–µ—Ä '{symbol}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π: BTC, ETH, SOL, ADA")
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞–ª–µ—Ä—Ç–∞
        alert_type = determine_alert_type(current_price, target_price)
        alert_icon = "üìà" if alert_type == "UP" else "üìâ"
        alert_text = "—Ä–æ—Å—Ç–∞" if alert_type == "UP" else "–ø–∞–¥–µ–Ω–∏—è"

        add_alert(user_id, full_symbol, target_price, current_price, alert_type)
        
        response = f"""‚úÖ –ê–ª–µ—Ä—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!

üí† –ú–æ–Ω–µ—Ç–∞: {full_symbol}
üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:,.2f}
{alert_icon} –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –ø—Ä–∏: ${target_price:,.2f}
üéØ –¢–∏–ø: –∂–¥—É {alert_text} —Ü–µ–Ω—ã

–ë–æ—Ç —Å–ª–µ–¥–∏—Ç –∑–∞ —Ü–µ–Ω–æ–π –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥!"""
        
        bot.reply_to(message, response)
        
    except ValueError:
        bot.reply_to(message, "‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!\n–ü—Ä–∏–º–µ—Ä: BTC 50000 –∏–ª–∏ ETH 3500.50")
    except Exception as e:
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω
def check_prices():
    print("üîÑ –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω –ó–ê–ü–£–©–ï–ù–ê! (–∏–Ω—Ç–µ—Ä–≤–∞–ª: 30 —Å–µ–∫—É–Ω–¥)")
    while True:
        try:
            all_alerts = get_all_alerts()
            if all_alerts:
                print(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é {len(all_alerts)} –∞–ª–µ—Ä—Ç–æ–≤...")
            else:
                print("üîç –ù–µ—Ç –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
            
            for alert in all_alerts:
                alert_id, user_id, symbol, target_price, initial_price, alert_type = alert
                current_price, _ = get_current_price(symbol)

                if current_price:
                    print(f"üí∞ {symbol}: ${current_price} / ${target_price} ({alert_type})")
                    
                    if should_trigger_alert(current_price, target_price, alert_type):
                        print(f"üö® –ê–õ–ï–†–¢ –°–†–ê–ë–û–¢–ê–õ! {symbol} {alert_type} ${target_price}")
                        try:
                            icon = "üìà" if alert_type == "UP" else "üìâ"
                            direction = "–≤—ã—Ä–æ—Å–ª–∞" if alert_type == "UP" else "—É–ø–∞–ª–∞"
                            message_text = f"""üöÄ –ê–õ–ï–†–¢! üöÄ

{icon} {symbol} {direction} –¥–æ —Ü–µ–ª–∏!

üéØ –¶–µ–ª—å: ${target_price:,.2f}
üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:,.2f}

–ê–ª–µ—Ä—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω! ‚úÖ"""
                            bot.send_message(user_id, message_text)
                            delete_alert(alert_id)
                            print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                        except Exception as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
                    else:
                        print(f"‚è≥ {symbol}: –µ—â–µ –Ω–µ –¥–æ—Å—Ç–∏–≥ —Ü–µ–ª–∏ ({alert_type})")
                else:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {symbol}")
                        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        
        print(f"‚è∞ –ñ–¥—É 30 —Å–µ–∫—É–Ω–¥...")
        time.sleep(30)

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
    init_db()
    
    print("üîÑ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...")
    price_thread = threading.Thread(target=check_prices)
    price_thread.daemon = True
    price_thread.start()
    
    print("‚úÖ –í–°–ï –°–ò–°–¢–ï–ú–´ –ó–ê–ü–£–©–ï–ù–´")
    print("ü§ñ –ë–æ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç –æ–ø—Ä–æ—Å Telegram...")
    
    try:
        bot.infinity_polling()
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")