import telebot
import sqlite3
import requests
import time
import os
import threading

print("=== –ü–†–û–í–ï–†–ö–ê RAILWAY ===")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
print("üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
for key, value in os.environ.items():
    if 'BOT' in key or 'TOKEN' in key:
        print(f"   {key}: {value}")

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
TELEGRAM_BOT_TOKEN = '7791402185:AAHqmitReQZjuHl7ZHV2VzPXTyFT9BUXVyU'

print(f"üìã TELEGRAM_BOT_TOKEN: {TELEGRAM_BOT_TOKEN}")

if not TELEGRAM_BOT_TOKEN:
    print("‚ùå –û–®–ò–ë–ö–ê: TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    print("‚ÑπÔ∏è  –°–æ–∑–¥–∞–π –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ Railway:")
    print("   Name: TELEGRAM_BOT_TOKEN")
    print("   Value: —Ç–æ–∫–µ–Ω_–æ—Ç_BotFather")
    exit()

print(f"‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω! –î–ª–∏–Ω–∞: {len(TELEGRAM_BOT_TOKEN)} —Å–∏–º–≤–æ–ª–æ–≤")

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
try:
    bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)
    print("‚úÖ –ë–æ—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: {e}")
    exit()

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('alerts.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS alerts (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        symbol TEXT NOT NULL,
        target_price REAL NOT NULL
    )
    ''')
    conn.commit()
    conn.close()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞")

def add_alert(user_id, symbol, target_price):
    conn = sqlite3.connect('alerts.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('INSERT INTO alerts (user_id, symbol, target_price) VALUES (?, ?, ?)',
                   (user_id, symbol.upper(), target_price))
    conn.commit()
    conn.close()

def get_all_alerts():
    conn = sqlite3.connect('alerts.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('SELECT id, user_id, symbol, target_price FROM alerts')
    all_alerts = cursor.fetchall()
    conn.close()
    return all_alerts

def delete_alert(alert_id):
    conn = sqlite3.connect('alerts.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('DELETE FROM alerts WHERE id = ?', (alert_id,))
    conn.commit()
    conn.close()

def get_current_price(symbol):
    try:
        full_symbol = f"{symbol.upper()}USDT"
        url = f"https://api.bybit.com/v5/market/tickers?category=spot&symbol={full_symbol}"
        response = requests.get(url, timeout=10)
        data = response.json()
        current_price = float(data['result']['list'][0]['lastPrice'])
        return current_price, full_symbol
    except:
        return None, symbol

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –ù–∞–ø–∏—à–∏: BTC 50000")

@bot.message_handler(commands=['test'])
def test(message):
    bot.reply_to(message, "üü¢ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω! –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω")

@bot.message_handler(commands=['myalerts'])
def list_alerts(message):
    user_id = message.from_user.id
    conn = sqlite3.connect('alerts.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('SELECT symbol, target_price FROM alerts WHERE user_id = ?', (user_id,))
    alerts = cursor.fetchall()
    conn.close()
    
    if not alerts:
        bot.send_message(message.chat.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.")
    else:
        response = "–¢–≤–æ–∏ –∑–∞–ø—Ä–æ—Å—ã:\n"
        for alert in alerts:
            symbol, price = alert
            response += f"‚Ä¢ {symbol} -> ${price}\n"
        bot.send_message(message.chat.id, response)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞
@bot.message_handler(func=lambda message: True)
def set_alert(message):
    try:
        user_id = message.from_user.id
        text = message.text.split()
        
        if len(text) < 2:
            bot.reply_to(message, "–ù–∞–ø–∏—à–∏: –¢–ò–ö–ï–† –¶–ï–ù–ê\n–ü—Ä–∏–º–µ—Ä: BTC 50000")
            return

        symbol = text[0]
        target_price = float(text[1])

        current_price, full_symbol = get_current_price(symbol)
        
        if current_price is None:
            bot.reply_to(message, f"–¢–∏–∫–µ—Ä '{symbol}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        add_alert(user_id, full_symbol, target_price)
        
        response = f"""‚úÖ –ê–ª–µ—Ä—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!

{full_symbol}
–°–µ–π—á–∞—Å: ${current_price:,.2f}
–û–ø–æ–≤–µ—â–µ–Ω–∏–µ: ${target_price:,.2f}"""
        
        bot.reply_to(message, response)
        
    except ValueError:
        bot.reply_to(message, "–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")

# –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω
def check_prices():
    while True:
        try:
            all_alerts = get_all_alerts()
            for alert in all_alerts:
                alert_id, user_id, symbol, target_price = alert
                current_price, _ = get_current_price(symbol)

                if current_price and current_price >= target_price:
                    message_text = f"üöÄ –ê–õ–ï–†–¢! {symbol} - ${current_price:,.2f}"
                    bot.send_message(user_id, message_text)
                    delete_alert(alert_id)
                        
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
        
        time.sleep(30)

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
    init_db()
    
    print("üîÑ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...")
    price_thread = threading.Thread(target=check_prices)
    price_thread.daemon = True
    price_thread.start()
    
    print("‚úÖ –í–°–ï –°–ò–°–¢–ï–ú–´ –ó–ê–ü–£–©–ï–ù–´")
    print("ü§ñ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
    
    bot.infinity_polling()