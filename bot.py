import telebot
import sqlite3
import requests
import time
import os
import threading

print("=== –ë–û–¢ –ó–ê–ü–£–©–ï–ù –ù–ê RAILWAY ===")

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TELEGRAM_BOT_TOKEN = '7791402185:AAHqmitReQZjuHl7ZHV2VzPXTyFT9BUXVyU'

if not TELEGRAM_BOT_TOKEN:
    print("‚ùå –û–®–ò–ë–ö–ê: TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    exit()

print(f"‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω! –î–ª–∏–Ω–∞: {len(TELEGRAM_BOT_TOKEN)} —Å–∏–º–≤–æ–ª–æ–≤")

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
try:
    bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)
    print("‚úÖ –ë–æ—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: {e}")
    exit()

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('alerts.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS alerts (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        symbol TEXT NOT NULL,
        target_price REAL NOT NULL
    )
    ''')
    conn.commit()
    conn.close()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞")

def add_alert(user_id, symbol, target_price):
    conn = sqlite3.connect('alerts.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('INSERT INTO alerts (user_id, symbol, target_price) VALUES (?, ?, ?)',
                   (user_id, symbol.upper(), target_price))
    conn.commit()
    conn.close()
    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∞–ª–µ—Ä—Ç: {symbol} -> ${target_price} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

def get_all_alerts():
    conn = sqlite3.connect('alerts.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('SELECT id, user_id, symbol, target_price FROM alerts')
    all_alerts = cursor.fetchall()
    conn.close()
    return all_alerts

def delete_alert(alert_id):
    conn = sqlite3.connect('alerts.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('DELETE FROM alerts WHERE id = ?', (alert_id,))
    conn.commit()
    conn.close()
    print(f"‚úÖ –£–¥–∞–ª–µ–Ω –∞–ª–µ—Ä—Ç ID: {alert_id}")

def get_user_alerts(user_id):
    conn = sqlite3.connect('alerts.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('SELECT id, symbol, target_price FROM alerts WHERE user_id = ?', (user_id,))
    alerts = cursor.fetchall()
    conn.close()
    return alerts

def get_current_price(symbol):
    try:
        full_symbol = f"{symbol.upper()}USDT"
        url = f"https://api.bybit.com/v5/market/tickers?category=spot&symbol={full_symbol}"
        response = requests.get(url, timeout=10)
        data = response.json()
        current_price = float(data['result']['list'][0]['lastPrice'])
        return current_price, full_symbol
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è {symbol}: {e}")
        return None, symbol

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
@bot.message_handler(commands=['start'])
def send_welcome(message):
    print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    bot.reply_to(message, "üí∞ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω –∫—Ä–∏–ø—Ç—ã.\n\n–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏: BTC 50000\n–ò —è —Å–æ–æ–±—â—É –∫–æ–≥–¥–∞ Bitcoin –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç $50000")

@bot.message_handler(commands=['status'])
def status(message):
    alerts_count = len(get_all_alerts())
    bot.reply_to(message, f"‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Railway!\n–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {alerts_count}\n\n–ò—Å–ø–æ–ª—å–∑—É–π:\n/testalert - —Ç–µ—Å—Ç–æ–≤—ã–π –∞–ª–µ—Ä—Ç\n/checknow - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å\n/myalerts - –º–æ–∏ –∞–ª–µ—Ä—Ç—ã")

@bot.message_handler(commands=['myalerts'])
def list_alerts(message):
    user_id = message.from_user.id
    alerts = get_user_alerts(user_id)
    
    if not alerts:
        bot.send_message(message.chat.id, "–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.")
    else:
        response = "üìã –¢–≤–æ–∏ –∑–∞–ø—Ä–æ—Å—ã:\n\n"
        for alert in alerts:
            id, symbol, price = alert
            response += f"‚Ä¢ {symbol} -> ${price}\n"
        bot.send_message(message.chat.id, response)

@bot.message_handler(commands=['testalert'])
def test_alert(message):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∞–ª–µ—Ä—Ç–æ–≤"""
    user_id = message.from_user.id
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞–ª–µ—Ä—Ç —Å —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–æ–π + 1$
        symbol = "BTC"
        current_price, full_symbol = get_current_price(symbol)
        
        if current_price:
            test_target_price = current_price + 1  # –í—Å–µ–≥–æ –Ω–∞ $1 –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π
            add_alert(user_id, full_symbol, test_target_price)
            
            response = f"üß™ –¢–ï–°–¢–û–í–´–ô –ê–õ–ï–†–¢!\n\n{full_symbol}\n–°–µ–π—á–∞—Å: ${current_price:,.2f}\n–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –ø—Ä–∏: ${test_target_price:,.2f}\n\n–î–æ–ª–∂–µ–Ω —Å—Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ 5-10 —Å–µ–∫—É–Ω–¥!"
            bot.reply_to(message, response)
            print(f"üß™ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∞–ª–µ—Ä—Ç: {full_symbol} ${test_target_price}")
        else:
            bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É BTC")
            
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")

@bot.message_handler(commands=['checknow'])
def check_now(message):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∞–ª–µ—Ä—Ç–æ–≤"""
    user_id = message.from_user.id
    try:
        all_alerts = get_all_alerts()
        user_alerts = [alert for alert in all_alerts if alert[1] == user_id]
        
        if not user_alerts:
            bot.reply_to(message, "–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤")
            return
            
        response = "üîç –ü—Ä–æ–≤–µ—Ä—è—é —Ç–≤–æ–∏ –∞–ª–µ—Ä—Ç—ã:\n\n"
        for alert in user_alerts:
            alert_id, user_id, symbol, target_price = alert
            current_price, _ = get_current_price(symbol)
            
            if current_price:
                status = "‚úÖ –î–û–°–¢–ò–ì–ù–£–¢–ê!" if current_price >= target_price else "‚è≥ –µ—â–µ –Ω–µ—Ç"
                response += f"‚Ä¢ {symbol}: ${current_price:,.2f} / ${target_price:,.2f} - {status}\n"
            else:
                response += f"‚Ä¢ {symbol}: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã / ${target_price:,.2f}\n"
        
        bot.reply_to(message, response)
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")

@bot.message_handler(commands=['clear'])
def clear_alerts(message):
    user_id = message.from_user.id
    conn = sqlite3.connect('alerts.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('DELETE FROM alerts WHERE user_id = ?', (user_id,))
    count = cursor.rowcount
    conn.commit()
    conn.close()
    bot.reply_to(message, f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {count} –∞–ª–µ—Ä—Ç–æ–≤!")

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞
@bot.message_handler(func=lambda message: True)
def set_alert(message):
    try:
        user_id = message.from_user.id
        text = message.text.split()
        
        if len(text) < 2:
            bot.reply_to(message, "‚ùå –ù–∞–ø–∏—à–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –¢–ò–ö–ï–† –¶–ï–ù–ê\n–ù–∞–ø—Ä–∏–º–µ—Ä: BTC 50000")
            return

        symbol = text[0].upper()
        target_price = float(text[1])

        print(f"üîÑ –ó–∞–ø—Ä–æ—Å –æ—Ç {user_id}: {symbol} ${target_price}")

        current_price, full_symbol = get_current_price(symbol)
        
        if current_price is None:
            bot.reply_to(message, f"‚ùå –¢–∏–∫–µ—Ä '{symbol}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π: BTC, ETH, SOL, ADA")
            return

        add_alert(user_id, full_symbol, target_price)
        
        response = f"""‚úÖ –ê–ª–µ—Ä—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!

üí† –ú–æ–Ω–µ—Ç–∞: {full_symbol}
üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:,.2f}
üéØ –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –ø—Ä–∏: ${target_price:,.2f}

–ë–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–Ω—ã –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥."""
        
        bot.reply_to(message, response)
        
    except ValueError:
        bot.reply_to(message, "‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!\n–ü—Ä–∏–º–µ—Ä: BTC 50000 –∏–ª–∏ ETH 3500.50")
    except Exception as e:
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω
def check_prices():
    print("üîÑ –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω –ó–ê–ü–£–©–ï–ù–ê! (–∏–Ω—Ç–µ—Ä–≤–∞–ª: 5 —Å–µ–∫—É–Ω–¥)")
    while True:
        try:
            all_alerts = get_all_alerts()
            if all_alerts:
                print(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é {len(all_alerts)} –∞–ª–µ—Ä—Ç–æ–≤...")
            else:
                print("üîç –ù–µ—Ç –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
            
            for alert in all_alerts:
                alert_id, user_id, symbol, target_price = alert
                current_price, _ = get_current_price(symbol)

                if current_price:
                    print(f"üí∞ {symbol}: ${current_price} / ${target_price}")
                    
                    if current_price >= target_price:
                        print(f"üö® –ê–õ–ï–†–¢ –°–†–ê–ë–û–¢–ê–õ! {symbol} –¥–æ—Å—Ç–∏–≥ ${target_price}")
                        try:
                            message_text = f"üöÄ –ê–õ–ï–†–¢! üöÄ\n\n{symbol} –¥–æ—Å—Ç–∏–≥ —Ü–µ–ª–∏!\nüéØ –¶–µ–ª—å: ${target_price:,.2f}\nüí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:,.2f}"
                            bot.send_message(user_id, message_text)
                            delete_alert(alert_id)
                            print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                        except Exception as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
                    else:
                        print(f"‚è≥ {symbol}: –µ—â–µ –Ω–µ –¥–æ—Å—Ç–∏–≥ —Ü–µ–ª–∏")
                else:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {symbol}")
                        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        
        print(f"‚è∞ –ñ–¥—É 5 —Å–µ–∫—É–Ω–¥...")
        time.sleep(5)  # –¢–æ–ª—å–∫–æ 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç–∞!

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
    init_db()
    
    print("üîÑ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...")
    price_thread = threading.Thread(target=check_prices)
    price_thread.daemon = True
    price_thread.start()
    
    print("‚úÖ –í–°–ï –°–ò–°–¢–ï–ú–´ –ó–ê–ü–£–©–ï–ù–´")
    print("ü§ñ –ë–æ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç –æ–ø—Ä–æ—Å Telegram...")
    
    try:
        bot.infinity_polling()
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")