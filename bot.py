import telebot
import sqlite3
import requests
import threading
import time
import os

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
TELEGRAM_BOT_TOKEN = '7791402185:AAHqmitReQZjuHl7ZHV2VzPXTyFT9BUXVyU'

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

# –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
def init_db():
    conn = sqlite3.connect('alerts.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS alerts (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        symbol TEXT NOT NULL,
        target_price REAL NOT NULL
    )
    ''')
    conn.commit()
    conn.close()

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É
def add_alert(user_id, symbol, target_price):
    conn = sqlite3.connect('alerts.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('INSERT INTO alerts (user_id, symbol, target_price) VALUES (?, ?, ?)',
                   (user_id, symbol.upper(), target_price))
    conn.commit()
    conn.close()

# –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_alerts(user_id):
    conn = sqlite3.connect('alerts.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('SELECT id, symbol, target_price FROM alerts WHERE user_id = ?', (user_id,))
    alerts = cursor.fetchall()
    conn.close()
    return alerts

# –ü–æ–ª—É—á–∞–µ–º –í–°–ï –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
def get_all_alerts():
    conn = sqlite3.connect('alerts.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('SELECT id, user_id, symbol, target_price FROM alerts')
    all_alerts = cursor.fetchall()
    conn.close()
    return all_alerts

# –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
def delete_alert(alert_id):
    conn = sqlite3.connect('alerts.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('DELETE FROM alerts WHERE id = ?', (alert_id,))
    conn.commit()
    conn.close()

# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Å Bybit
def get_current_price(symbol):
    try:
        full_symbol = f"{symbol.upper()}USDT"
        url = f"https://api.bybit.com/v5/market/tickers?category=spot&symbol={full_symbol}"
        response = requests.get(url).json()
        current_price = float(response['result']['list'][0]['lastPrice'])
        return current_price, full_symbol
    except:
        return None, symbol

# –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
def check_prices_background():
    while True:
        try:
            all_alerts = get_all_alerts()
            for alert in all_alerts:
                alert_id, user_id, symbol, target_price = alert
                current_price, _ = get_current_price(symbol)

                if current_price and current_price >= target_price:
                    bot.send_message(user_id, f'üöÄ –ê–õ–ï–†–¢! üöÄ\n{symbol} –¥–æ—Å—Ç–∏–≥ —Ü–µ–Ω—ã ${target_price}!\n–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price}')
                    delete_alert(alert_id)
        except:
            pass
        time.sleep(30)

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Ç–∏–∫–µ—Ä –∏ —Ü–µ–Ω—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: BTC 50000")

# –ö–æ–º–∞–Ω–¥–∞ /myalerts - –ø–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∑–∞–ø—Ä–æ—Å—ã
@bot.message_handler(commands=['myalerts'])
def list_alerts(message):
    user_id = message.from_user.id
    alerts = get_user_alerts(user_id)

    if not alerts:
        bot.send_message(message.chat.id, "–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.")
    else:
        response = "–¢–≤–æ–∏ –∑–∞–ø—Ä–æ—Å—ã:\n"
        for alert in alerts:
            id, symbol, price = alert
            response += f"{symbol} -> ${price}\n"
        bot.send_message(message.chat.id, response)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ç–∏–∫–µ—Ä–æ–º –∏ —Ü–µ–Ω–æ–π
@bot.message_handler(func=lambda message: True)
def set_alert(message):
    try:
        user_id = message.from_user.id
        parts = message.text.split()
        
        if len(parts) < 2:
            bot.reply_to(message, "–ù–∞–ø–∏—à–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –¢–ò–ö–ï–† –¶–ï–ù–ê\n–ù–∞–ø—Ä–∏–º–µ—Ä: BTC 50000")
            return

        symbol = parts[0]
        target_price = float(parts[1])

        current_price, full_symbol = get_current_price(symbol)
        if current_price is None:
            bot.reply_to(message, f"–û—à–∏–±–∫–∞! –¢–∏–∫–µ—Ä '{symbol}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        add_alert(user_id, full_symbol, target_price)
        bot.reply_to(message, f"‚úÖ –ì–æ—Ç–æ–≤–æ! –°–ª–µ–∂—É –∑–∞ {full_symbol}\n–°–µ–π—á–∞—Å: ${current_price}\n–û–ø–æ–≤–µ—â—É –ø—Ä–∏: ${target_price}")

    except ValueError:
        bot.reply_to(message, "–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: BTC 50000")

# –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ
init_db()
thread = threading.Thread(target=check_prices_background)
thread.daemon = True
thread.start()

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
bot.infinity_polling()